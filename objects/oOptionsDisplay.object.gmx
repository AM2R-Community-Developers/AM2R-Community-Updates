<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.curropt = 0;
lastitem = 12; // og 10
active = 0;
alarm[0] = 5;
i = 0;
repeat (13) { // og 11
    global.canedit[i] = 1;
    i += 1;
}
targety = 0;
view_object[0] = id;
timer = 0;
langno = array_length_1d(global.language);
for (i = 0; i &lt; langno; i += 1) {
    ini_open(global.language[i]);
    lang[i] = ini_read_string("Header", "Language", "[!]");
    ini_close();
}
event_user(0);
event_user(3);
global.tiptext = tip[global.curropt];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>set_window_scale(global.opscale);
display_reset(0, global.opvsync);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active) {
    if (oControl.kDown &gt; 0 &amp;&amp; (oControl.kDownPushedSteps == 0 || oControl.kDownPushedSteps &gt; 30 &amp;&amp; timer == 0)) {      
        if (os_type == os_android) {
            switch global.curropt { 
            // this is spaghetti but I am not going to shift every single
            // menu id to add one option. This is dumb.
                case 0: global.curropt = 10; break;
                case 9: global.curropt = 12; break;
                case 11: global.curropt = 3; break;
                default: global.curropt += 1; break;
            }
        } else {
            switch global.curropt { 
            // this is spaghetti but I am not going to shift every single
            // menu id to add one option. This is dumb.
                case 2: global.curropt = 10; break;
                case 9: global.curropt = 12; break;
                case 11: global.curropt = 3; break;
                default: global.curropt += 1; break;
            }
        }
        if (global.curropt &gt; lastitem) global.curropt = 0;
        while (global.canedit[global.curropt] == 0) global.curropt += 1;
        targety = op[global.curropt].y + 8 + 8;
        if (targety &gt; 256 + (sep*2) &amp;&amp; op[7].visible) targety = 256 + (sep*2);
        if (targety &gt; 240 + (sep*2) &amp;&amp; !op[7].visible) targety = 240 + (sep*2);
        if(os_type == os_android) { if (targety &gt; 224) targety = 224; }
        sfx_play(sndMenuMove);
        global.tiptext = tip[global.curropt];
    }
    if (oControl.kUp &gt; 0 &amp;&amp; (oControl.kUpPushedSteps == 0 || oControl.kUpPushedSteps &gt; 30 &amp;&amp; timer == 0)) {
        //global.curropt -= 1;
        if (os_type == os_android) {
            switch global.curropt { // spaghetti woo
                case 3: global.curropt = 11; break;
                case 10: global.curropt = 0; break;
                case 12: global.curropt = 9; break;
                default: global.curropt -= 1; break;
            }
        } else {
            switch global.curropt { // spaghetti woo
                case 3: global.curropt = 11; break;
                case 10: global.curropt = 2; break;
                case 12: global.curropt = 9; break;
                default: global.curropt -= 1; break;
            }
        }
        if (global.curropt &lt; 0) global.curropt = lastitem;
        while (global.canedit[global.curropt] == 0) global.curropt -= 1;
        targety = op[global.curropt].y + 8 + 8;
        if (targety &gt; 256 + (sep*2) &amp;&amp; op[7].visible) targety = 256 + (sep*2);
        if (targety &gt; 240 + (sep*2) &amp;&amp; !op[7].visible) targety = 240 + (sep*2);
        if(os_type == os_android) { if (targety &gt; 208) targety = 208; }
        sfx_play(sndMenuMove);
        global.tiptext = tip[global.curropt];
    }
    if (oControl.kLeft &gt; 0 &amp;&amp; oControl.kLeftPushedSteps == 0 &amp;&amp; oControl.kDown == 0 &amp;&amp; oControl.kUp == 0) {
        if (global.curropt == 5) {
            global.ophudshowmetrcount -= 1;
            if (global.ophudshowmetrcount &lt; 0) global.ophudshowmetrcount = 2;
        }
        if (global.curropt == 1) {
            global.opscale -= 1;
            if (global.opfullscreen &amp;&amp; global.opscale &lt; 0) global.opscale = 4;
            if (!global.opfullscreen) {
                if (global.opscale &lt; 1) global.opscale = 4;
                set_window_scale(global.opscale);
            }
        }
        if (global.curropt == 7) {
            oControl.mod_buttonsconfig -= 1;
            if (os_type != os_android &amp;&amp; oControl.mod_buttonsconfig &lt; 0) oControl.mod_buttonsconfig = 3;
            if (os_type == os_android &amp;&amp; oControl.mod_buttonsconfig &lt; 0) oControl.mod_buttonsconfig = 5;
            event_user(2);
            event_user(3);
            event_user(4);
        }
        if (global.curropt == 9) {
            global.currentlanguage -= 1;
            if (global.currentlanguage &lt; 0) global.currentlanguage = langno - 1;
            event_user(2);
            event_user(3);
            event_user(4);
            global.tiptext = tip[global.curropt];
        }
    }
    if (oControl.kRight &gt; 0 &amp;&amp; oControl.kRightPushedSteps == 0 &amp;&amp; oControl.kDown == 0 &amp;&amp; oControl.kUp == 0) {
        if (global.curropt == 5) {
            global.ophudshowmetrcount += 1;
            if (global.ophudshowmetrcount &gt; 2) global.ophudshowmetrcount = 0;
        }
        if (global.curropt == 1) {
            global.opscale += 1;
            if (global.opfullscreen &amp;&amp; global.opscale &gt; 4) global.opscale = 0;
            if (!global.opfullscreen) {
                if (global.opscale &gt; 4) global.opscale = 1;
                set_window_scale(global.opscale);
            }
        }
        if (global.curropt == 7) {
            oControl.mod_buttonsconfig += 1;
            if (os_type != os_android &amp;&amp; oControl.mod_buttonsconfig &gt; 3) oControl.mod_buttonsconfig = 0;
            if (os_type == os_android &amp;&amp; oControl.mod_buttonsconfig &gt; 5) oControl.mod_buttonsconfig = 0;
            event_user(2);
            event_user(3);
            event_user(4);
        }
        if (global.curropt == 9) {
            global.currentlanguage += 1;
            if (global.currentlanguage &gt; langno - 1) global.currentlanguage = 0;
            event_user(2);
            event_user(3);
            event_user(4);
            global.tiptext = tip[global.curropt];
        }
        
        
    }
    if (oControl.kLeft &gt; 0 &amp;&amp; oControl.kLeftPushedSteps == 0 || oControl.kRight &gt; 0 &amp;&amp; oControl.kRightPushedSteps == 0 &amp;&amp; global.curropt &lt; 12 &amp;&amp; oControl.kDown == 0 &amp;&amp; oControl.kUp == 0) {
        if (global.curropt == 0) {
            if(os_type != os_android) {
                global.opfullscreen = !global.opfullscreen;
                set_fullscreen(global.opfullscreen);
                if (!global.opfullscreen) {
                    global.opscale = 1;
                    alarm[1] = 1;
                }
            }
            else {
                global.opvsync = !global.opvsync;
                sfx_play(sndMenuMove);
                display_reset(0, global.opvsync);
            }
        }
        if (global.curropt == 2) {
            global.opvsync = !global.opvsync;
            display_reset(0, global.opvsync);
            if (!global.opfullscreen) set_window_scale(global.opscale);
        }
        if (global.curropt == 3) global.opshowhud = !global.opshowhud;
        if (global.curropt == 4) global.ophudshowmap = !global.ophudshowmap;
        if (global.curropt == 6) global.ophudshowhints = !global.ophudshowhints;
        if (global.curropt == 8) global.ophudshowlogmsg = !global.ophudshowlogmsg;
        
        if (global.curropt == 10) { // sensitivity mode
            if (global.sensitivitymode == 1) {
                global.sensitivitymode = 0;
            } else {
                global.sensitivitymode = 1;
            }
            event_user(2); // update text
        }
        if (global.curropt == 11) { // widescreen
            if (global.widescreen_enabled == 1) {
                global.widescreen_enabled = 0;
            } else {
                global.widescreen_enabled = 1;
            }
            if (room == rm_options) {
                oControl.widescreen = global.widescreen_enabled;
                if (global.widescreen_enabled == 0) {
                    view_visible[1] = false;
                }
                
                if (global.opfullscreen == 0) {
                    set_window_scale(window_get_height()/240);
                    window_set_position(window_get_x()+((53-(global.widescreen_enabled*106))*(window_get_height()/240)),window_get_y());
                }
                if (global.opfullscreen == 1 || os_type == os_android) {
                    display_reset(0, global.opvsync);
                }
            }

            event_user(2); // update text
        }
        
        if(os_type == os_android) {
            if(global.curropt != 0) {
                sfx_play(sndMenuMove);
            }
        }
        else sfx_play(sndMenuMove);
        event_user(2);
    }
    if (oControl.kMenu1 &amp;&amp; oControl.kMenu1PushedSteps == 0) {
        if (global.curropt == 12) {
            load_resources();
            save_gameoptions();
            view_object[0] = noone;
            view_yview[0] = 0;
            instance_create(50, 92, oOptionsMain);
            instance_destroy();
            sfx_play(sndMenuSel);
        }
    }
} // if (active)
if (targety != y) y += (targety - y) / 10;
timer -= 1;
if (timer &lt; 0) timer = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>op[50].text = get_text("OptionsDisplay", "Title_Display");
op[0].label = get_text("OptionsDisplay", "Fullscreen");
if(os_type == os_android) {
    op[0].label = get_text("OptionsDisplay", "VSync");
}
if (global.opfullscreen) {
    op[1].label = get_text("OptionsDisplay", "DisplayScale");
} else op[1].label = get_text("OptionsDisplay", "WindowSize");
op[2].label = get_text("OptionsDisplay", "VSync");
op[51].text = get_text("OptionsDisplay", "Title_HUD");
op[3].label = get_text("OptionsDisplay", "HUDDisplay");
op[4].label = get_text("OptionsDisplay", "HUDMap");
op[5].label = get_text("OptionsDisplay", "MonsterCounter");
op[52].text = get_text("OptionsDisplay", "Title_Notifications");
op[6].label = get_text("OptionsDisplay", "Hints");
op[7].label = get_text("ExtrasMenu", "Controller");
op[8].label = get_text("OptionsDisplay", "ScanNotifications");
op[9].label = get_text("OptionsDisplay", "Language");

op[10].label = get_text("Misc", "SensitivityMode");

op[11].label = get_text("Misc", "Widescreen");

op[12].label = get_text("GlobalOptions", "Exit");
with (oSS_Fg) {
    opt_text1 = get_text("Subscreen", "Title_Options");
    tip1text = get_text("Subscreen", "Menu_Tip");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tip[0] = get_text("OptionsDisplay", "Fullscreen_Tip");
if(os_type == os_android) tip[0] = get_text("OptionsDisplay", "VSync_Tip");
tip[1] = get_text("OptionsDisplay", "DisplayScale_Tip");
tip[2] = get_text("OptionsDisplay", "VSync_Tip");
tip[3] = get_text("OptionsDisplay", "HUDDisplay_Tip");
tip[4] = get_text("OptionsDisplay", "HUDMap_Tip");
tip[5] = get_text("OptionsDisplay", "MonsterCounter_Tip");
tip[6] = get_text("OptionsDisplay", "Hints_Tip");
tip[7] = get_text("ExtrasMenu", "Controller_Tip");
tip[8] = get_text("OptionsDisplay", "ScanNotifications_Tip");
tip[9] = get_text("OptionsDisplay", "Language_Tip");

tip[10] = get_text("Misc", "SensitivityMode_Tip");

tip[11] = get_text("Misc", "Widescreen_Tip");

tip[12] = get_text("GlobalOptions", "ExitMain_Tip");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.opfullscreen) {
    op[0].optext = get_text("GlobalOptions", "Enabled");
    op[1].label = get_text("OptionsDisplay", "DisplayScale");
} else {
    op[0].optext = get_text("GlobalOptions", "Disabled");
    op[1].label = get_text("OptionsDisplay", "WindowSize");
}
if (global.opscale == 0) op[1].optext = get_text("OptionsDisplay", "DisplayScale_Stretch");
if (global.opscale == 1) op[1].optext = "1X";
if (global.opscale == 2) op[1].optext = "2X";
if (global.opscale == 3) op[1].optext = "3X";
if (global.opscale == 4) op[1].optext = "4X";
if (global.opvsync) {
    op[2].optext = get_text("GlobalOptions", "Enabled");
    if(os_type == os_android) op[0].optext = get_text("GlobalOptions", "Enabled");
} else {
    op[2].optext = get_text("GlobalOptions", "Disabled");
    if(os_type == os_android) op[0].optext = get_text("GlobalOptions", "Disabled");
}
if (global.opshowhud) {
    op[3].optext = get_text("GlobalOptions", "Enabled");
} else op[3].optext = get_text("GlobalOptions", "Disabled");
if (global.ophudshowmap) {
    op[4].optext = get_text("GlobalOptions", "Enabled");
} else op[4].optext = get_text("GlobalOptions", "Disabled");
if (global.ophudshowmetrcount == 0) op[5].optext = get_text("GlobalOptions", "Disabled");
if (global.ophudshowmetrcount == 1) op[5].optext = get_text("OptionsDisplay", "MonsterCounter_Local");
if (global.ophudshowmetrcount == 2) op[5].optext = get_text("OptionsDisplay", "MonsterCounter_Global");
if (global.ophudshowhints) {
    op[6].optext = get_text("GlobalOptions", "Enabled");
} else op[6].optext = get_text("GlobalOptions", "Disabled");
switch (oControl.mod_buttonsconfig) {
    case 0: op[7].optext = get_text("ExtrasMenu", "XBox"); break;
    case 1: op[7].optext = get_text("ExtrasMenu", "Playstation"); break;
    case 2: op[7].optext = get_text("ExtrasMenu", "NintendoPro"); break;
    case 3: op[7].optext = get_text("ExtrasMenu", "SNESColored"); break;
    case 4: op[7].optext = get_text("ExtrasMenu", "MOGA"); break;
    case 5: op[7].optext = get_text("ExtrasMenu", "OUYA"); break;
    default: op[7].optext = "[!]";
}
if (global.ophudshowlogmsg) {
    op[8].optext = get_text("GlobalOptions", "Enabled");
} else op[8].optext = get_text("GlobalOptions", "Disabled");
op[9].optext = lang[global.currentlanguage];
if (global.curropt == 5) {
    if (global.ophudshowmetrcount == 0) global.tiptext = get_text("OptionsDisplay", "MonsterCounter_Disabled_Tip");
    if (global.ophudshowmetrcount == 1) global.tiptext = get_text("OptionsDisplay", "MonsterCounter_Local_Tip");
    if (global.ophudshowmetrcount == 2) global.tiptext = get_text("OptionsDisplay", "MonsterCounter_Global_Tip");
}

if (global.sensitivitymode) {
    op[10].optext = get_text("GlobalOptions", "Enabled");
} else {
    op[10].optext = get_text("GlobalOptions", "Disabled");
}

if (global.widescreen_enabled) {
    op[11].optext = get_text("GlobalOptions", "Enabled");
} else {
    op[11].optext = get_text("GlobalOptions", "Disabled");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (op[0]) instance_destroy();
with (op[1]) instance_destroy();
with (op[2]) instance_destroy();
with (op[3]) instance_destroy();
with (op[4]) instance_destroy();
with (op[5]) instance_destroy();
with (op[6]) instance_destroy();
with (op[7]) instance_destroy();
with (op[8]) instance_destroy();
with (op[9]) instance_destroy();
with (op[10]) instance_destroy();
with (op[11]) instance_destroy();
with (op[12]) instance_destroy();
with (op[50]) instance_destroy();
with (op[51]) instance_destroy();
with (op[52]) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y -= 8;
sep = 16;
var i = 1;
op[50] = instance_create(x, y * i, oMenuLabel);
op[50].text = get_text("OptionsDisplay", "Title_Display");
op[0] = instance_create(x, y + sep * i, oOptionLR);
op[0].label = get_text("OptionsDisplay", "Fullscreen");
op[0].optionid = 0;
i++;
if(os_type == os_android) { // android, replace fullscreen op with vsync
    op[0].label = get_text("OptionsDisplay", "VSync");
}
op[1] = instance_create(x, y + sep * i, oOptionLR);
if (global.opfullscreen) {
    op[1].label = get_text("OptionsDisplay", "DisplayScale");
} else op[1].label = get_text("OptionsDisplay", "WindowSize");
op[1].optionid = 1;
if(os_type == os_android) { // android, make op[1] vsync invis
    op[1].visible = false;
    global.canedit[1] = 0;
}
i++;
op[2] = instance_create(x, y + sep * i, oOptionLR); 
op[2].label = get_text("OptionsDisplay", "VSync");
op[2].optionid = 2;
if(os_type == os_android) { // invis vsync op[2] on android
    op[2].visible = false;
    global.canedit[2] = 0;
    i = 1;
}

i++;
op[10] = instance_create(x, y + sep * i, oOptionLR);
op[10].label = get_text("Misc", "SensitivityMode");
op[10].optionid = 10;

i++;
op[11] = instance_create(x, y + sep * i, oOptionLR);
op[11].label = get_text("Misc", "Widescreen");
op[11].optionid = 11;

i++;
op[51] = instance_create(x, y + sep * i, oMenuLabel);
op[51].text = get_text("OptionsDisplay", "Title_HUD");
i++;
op[3] = instance_create(x, y + sep * i, oOptionLR);
op[3].label = get_text("OptionsDisplay", "HUDDisplay");
op[3].optionid = 3;
i++;
op[4] = instance_create(x, y + sep * i, oOptionLR);
op[4].label = get_text("OptionsDisplay", "HUDMap");
op[4].optionid = 4;
i++;
op[5] = instance_create(x, y + sep * i, oOptionLR);
op[5].label = get_text("OptionsDisplay", "MonsterCounter");
op[5].optionid = 5;
i++;
op[52] = instance_create(x, y + sep * i, oMenuLabel);
op[52].text = get_text("OptionsDisplay", "Title_Notifications");
i++;
op[6] = instance_create(x, y + sep * i, oOptionLR);
op[6].label = get_text("OptionsDisplay", "Hints");
op[6].optionid = 6;
i++;
op[7] = instance_create(x, y + sep * i, oOptionLR);
op[7].label = get_text("ExtrasMenu", "Controller");
op[7].optionid = 7;
if ((os_type != os_android &amp;&amp; !gamepad_is_connected(global.gamepadIndex)) || (os_type == os_android &amp;&amp; (!global.joydetected || global.compatibilitymode)) || (os_type == os_android &amp;&amp; global.compatibilitymode)) {
    op[7].visible = false;
    global.canedit[7] = 0;
}
else i++;
op[8] = instance_create(x, y + sep * i, oOptionLR);
op[8].label = get_text("OptionsDisplay", "ScanNotifications");
op[8].optionid = 8;
i++;
op[9] = instance_create(x, y + sep * i, oOptionLR);
op[9].label = get_text("OptionsDisplay", "Language");
op[9].optionid = 9;


i++;
op[12] = instance_create(x, y + sep * i, oPauseOption);
op[12].optionid = 12;
op[12].label = get_text("GlobalOptions", "Exit");

event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
