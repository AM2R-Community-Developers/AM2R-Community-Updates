<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sIntro_A1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATION
image_speed = 0; // 0.25 at runtime, don't set until visible
alarm[0] = 2;
//vis = 0;
visible = 0;

state = 1;

for (var i = 0; i &lt; (image_number + 1); i++) {
    pause[i] = 0;
}
quarter_delay = 15;
final_delay = 180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ALARM[0]

var index = real(string_char_at(sprite_get_name(sprite_index), 9));
//show_debug_message(string(index));

for (var i = 0; i &lt; (image_number + 1); i++) { // Safety first, kiddos
    pause[i] = 0;
}

// Grab values from oControl...
pause[oControl.mod_header[index, 1]] = quarter_delay;
pause[oControl.mod_header[index, 2]] = quarter_delay;
pause[oControl.mod_header[index, 3]] = quarter_delay;
pause[oControl.mod_header[index, 4]] = final_delay;

if (sprite_index = sIntro_A7) { // Special handling for INTERLOPER
    pause[oControl.mod_header[index, 2]] = quarter_delay*2;
    pause[oControl.mod_header[index, 3]] = quarter_delay*2;
    pause[oControl.mod_header[index, 4]] = quarter_delay*2;
}
    


//pause[0] = quarter_delay;
//pause[3] = quarter_delay;

/*switch (sprite_index) {
    case sIntro_A1:
    case sIntro_A2: {
        pause[19] = quarter_delay;
        pause[21] = final_delay;
        break;
    }
    case sIntro_A4:
    case sIntro_A8: {
        pause[15] = quarter_delay;
        pause[17] = final_delay;
        break;
    }
    case sIntro_A3: {
        pause[24] = quarter_delay;
        pause[26] = final_delay;
        break;
    }
    case sIntro_A5: {
        pause[26] = quarter_delay;
        pause[28] = final_delay;
        break;
    }
    case sIntro_A7: {
        pause[7] = quarter_delay*2;
        pause[9] = quarter_delay*2;
        pause[17] = quarter_delay*2;
    }
}*/

visible = 1;
image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STEP
if ((state == 0) || (!global.ingame) || (room == rm_transition)) {
    image_speed = 0;
    exit;
} else {
    if (pause[floor(image_index)] &gt; 0) { // If one of the pause frames and not yet depleted...
        image_speed = 0; // Freeze
        image_index = floor(image_index);
        pause[floor(image_index)] --;
    } else {
        image_speed = 0.25;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATION_END
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ingame &amp;&amp; oControl.displaygui &amp;&amp; instance_exists(oCharacter)) {
    surface_set_target(oControl.gui_surface);
    draw_sprite_ext(sprite_index, image_index, (160 - (floor(sprite_get_width(sprite_index)/2))) + (oControl.widescreen_space/2), 30, 1, 1, 0, -1, image_alpha); // y was 30 for top, 228 for bottom
    // 316 used to be x for right alignment
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
