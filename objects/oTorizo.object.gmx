<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTorizoStandUp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canbeX = 0;
CollisionBottom = 0;
CollisionTop = 0;
CollisionLeft = 0;
CollisionRight = 0;
i = 0;
WallLeft = 368;
gravity = 0;
gravity_direction = 270;
state = 0;
statetime = 0;
facing = 1;
facingplayer = 0;
turning = 0;
//myhealth = 200;
myhealth = global.mod_torizohealthform1;
//if (global.difficulty &gt;= 2) myhealth = 300;
if (global.difficulty &gt;= 2) myhealth = global.mod_torizohealthform1hard;

//damage = 30;
damage = global.mod_torizondamageform1;
canbehit = 1;
flashing = 0;
fxtimer = 0;
instance_create(0, 0, oTorizoWall);
myobj1 = instance_create(x, y, oTorizoBottom);
myobj1.damage = damage;
stepdelay = 30;
nextstepdelay = 30;
walkspeed = 0.3;
image_index_last = 0;
proj_damage = 0;
scan_log(34, get_text("ScanEvents", "ScanMechanism"), 180, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (myobj1) instance_destroy();
with (oTorizoCam) instance_destroy();
tor = instance_create(x, y, oTorizo2);
tor.facing = facing;
mus_play(musTorizoB);
oMusicV2.bossbgm = musTorizoB;
instance_create(0, 0, oTorizoCeiling);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>expl = instance_create(x - 16 + random(32), y - random(50), oFXAnimSpark);
expl.image_speed = 0.5;
expl.additive = 0;
expl.sprite_index = sExpl1;
expl.image_xscale = 0.5;
expl.image_yscale = 0.5;
alarm[10] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 2 &amp;&amp; statetime &lt; 250 || state == 7) {
    proj = instance_create(x + 20 * facing, y - 70, oTorizoFireball);
    proj.hspeed = (2 + random(4)) * facing;
    proj.vspeed = -random(2);
    alarm[0] = 10;
    if (global.difficulty &gt;= 2) {
        proj.hspeed = (2 + random(7)) * facing;
        proj.vspeed = -random(2);
        alarm[0] = 8;
    }
    sfx_play(sndFireball);
}
if (state == 4 &amp;&amp; y &lt; 430) {
    proj = instance_create(x + 20 * facing, y - 73, oTorizoFireball);
    proj.hspeed = (4 + random(1)) * facing;
    proj.vspeed = -2;
    alarm[0] = 8;
    if (global.difficulty &gt;= 2) {
        alarm[0] = 6;
        proj.vspeed = 0;
    }
    sfx_play(sndFireball);
}
if (state == 10) {
    if (facingplayer) {
        proj = instance_create(x + 12 * facing, y - 70, oTorizoFireball);
        proj.direction = point_direction(x + 12 * facing, y - 65, oCharacter.x, oCharacter.y - 8);
        proj.speed = 8;
        if (global.difficulty &gt;= 2) proj.speed = 9;
        sfx_play(sndFireball);
    }
    if (statetime &lt; 120) alarm[0] = 6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var attackcounter;
if (y &gt;= 432) {
    CollisionBottom = 1;
} else CollisionBottom = 0;
if (y &lt;= 368) {
    CollisionTop = 1;
} else CollisionTop = 0;
if (x &lt;= WallLeft + 16) {
    CollisionLeft = 1;
} else CollisionLeft = 0;
if (x &gt;= 592) {
    CollisionRight = 1;
} else CollisionRight = 0;
facingplayer = 0;
if (facing == 1 &amp;&amp; oCharacter.x &gt; x) facingplayer = 1;
if (facing == -1 &amp;&amp; oCharacter.x &lt; x) facingplayer = 1;
nextattack = floor(random(4));
if (global.difficulty &lt; 2) {
    if (myhealth &gt; 75) {
        nextstepdelay = 30;
        walkspeed = 0.2;
        attackcounter = 210;
    }
    if (myhealth &lt; 75) {
        nextstepdelay = 20;
        walkspeed = 0.3;
        attackcounter = 190;
    }
    if (myhealth &lt; 50) {
        nextstepdelay = 10;
        walkspeed = 0.4;
        attackcounter = 160;
    }
    if (myhealth &lt; 25) {
        nextstepdelay = 0;
        walkspeed = 0.5;
        attackcounter = 140;
    }
} else {
    if (myhealth &gt; 250) {
        nextstepdelay = 30;
        walkspeed = 0.2;
        attackcounter = 150;
    }
    if (myhealth &lt; 200) {
        nextstepdelay = 20;
        walkspeed = 0.3;
        attackcounter = 180;
    }
    if (myhealth &lt; 150) {
        nextstepdelay = 10;
        walkspeed = 0.4;
        attackcounter = 200;
    }
    if (myhealth &lt; 100) {
        nextstepdelay = 0;
        walkspeed = 0.5;
        attackcounter = 220;
    }
} // if (global.difficulty &lt; 2) else
if (state == 0) {
    if (statetime == 0) {
        sprite_index = sTorizoStandUp;
        image_index = 0;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime == 120) image_speed = 0.2;
    if (statetime == 240) {
        state = 1;
        statetime = 0;
    }
}
if (state == 1) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 2;
        image_speed = 0;
    }
    if (statetime &gt; 10) {
        if (oCharacter.x &lt; x - 32 &amp;&amp; facing == 1 &amp;&amp; turning == 0) {
            facing = -1;
            turning = 1;
            sprite_index = sTorizoTurn;
            image_index = 0;
            image_speed = 0.5;
        }
        if (oCharacter.x &gt; x + 32 &amp;&amp; facing == -1 &amp;&amp; turning == 0) {
            facing = 1;
            turning = 1;
            sprite_index = sTorizoTurn;
            image_index = 0;
            image_speed = 0.5;
        }
    }
    if (turning == 0) {
        sprite_index = sTorizoWalk;
        image_speed = walkspeed;
        if (floor(image_index) == 0 || floor(image_index) == 7) {
            if (stepdelay &gt; 0) {
                image_speed = 0;
                stepdelay -= 1;
            }
        }
        if (floor(image_index) == 1 || floor(image_index) == 8) stepdelay = nextstepdelay;
    }
    if ((facing == 1 &amp;&amp; !CollisionRight || facing == -1 &amp;&amp; !CollisionLeft) &amp;&amp; !turning) {
        if (floor(image_index) == 0 &amp;&amp; image_index_last != 0) {
            x += facing * 6;
            event_user(1);
        }
        if (floor(image_index) == 1 &amp;&amp; image_index_last != 1) x += facing * 6;
        if (floor(image_index) == 2 &amp;&amp; image_index_last != 2) x += facing * 6;
        if (floor(image_index) == 3 &amp;&amp; image_index_last != 3) x += facing * 6;
        if (floor(image_index) == 4 &amp;&amp; image_index_last != 4) x += facing * 6;
        if (floor(image_index) == 5 &amp;&amp; image_index_last != 5) x += facing * 6;
        if (floor(image_index) == 6 &amp;&amp; image_index_last != 6) x += facing * 6;
        if (floor(image_index) == 7 &amp;&amp; image_index_last != 7) {
            x += facing * 6;
            event_user(1);
        }
        if (floor(image_index) == 8 &amp;&amp; image_index_last != 8) x += facing * 6;
        if (floor(image_index) == 9 &amp;&amp; image_index_last != 9) x += facing * 6;
        if (floor(image_index) == 10 &amp;&amp; image_index_last != 10) x += facing * 6;
        if (floor(image_index) == 11 &amp;&amp; image_index_last != 11) x += facing * 6;
        if (floor(image_index) == 12 &amp;&amp; image_index_last != 12) x += facing * 6;
        if (floor(image_index) == 13 &amp;&amp; image_index_last != 13) x += facing * 6;
        if (floor(image_index) == 14 &amp;&amp; image_index_last != 14) x += facing * 6;
        image_index_last = floor(image_index);
    }
    if (CollisionLeft &amp;&amp; hspeed &lt; 0) {
        hspeed = 0;
        x = WallLeft + 16;
    }
    if (CollisionRight &amp;&amp; hspeed &gt; 0) {
        hspeed = 0;
        x = 592;
    }
    if (statetime &gt; 150 &amp;&amp; image_index &lt; 1) {
        if (nextattack == 0) {
            state = 2;
            statetime = 0;
        }
        if (nextattack == 1) {
            state = 3;
            statetime = 0;
        }
        if (nextattack == 2) {
            state = 4;
            statetime = 0;
        }
        if (nextattack == 3) {
            state = 4;
            statetime = 0;
        }
        if (oCharacter.y &lt; y - 90) {
            state = 4;
            statetime = 0;
        }
    }
} // if (state == 1)
if (state == 2) {
    if (statetime == 0) {
        sprite_index = sTorizoFireball;
        image_index = 0;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime &lt; 120 &amp;&amp; image_index &lt; 5) image_index += 0.25;
    if (statetime &gt; 250 &amp;&amp; image_index &gt; 0) image_index -= 0.25;
    if (statetime == 60) alarm[0] = 1;
    if (statetime == 270) {
        state = 1;
        statetime = -1;
    }
}
if (state == 3) {
    if (statetime == 0) {
        sprite_index = sTorizoSwipe;
        image_index = 0;
        image_index_last = 0;
        image_speed = 0.2;
        speed = 0;
        turning = 0;
        if (oCharacter.x &lt; x - 32 &amp;&amp; facing == 1 &amp;&amp; turning == 0) {
            facing = -1;
            turning = 1;
            sprite_index = sTorizoTurn;
            image_index = 0;
            image_speed = 0.5;
        }
        if (oCharacter.x &gt; x + 32 &amp;&amp; facing == -1 &amp;&amp; turning == 0) {
            facing = 1;
            turning = 1;
            sprite_index = sTorizoTurn;
            image_index = 0;
            image_speed = 0.5;
        }
    }
    if (!turning) sprite_index = sTorizoSwipe;
    if (floor(image_index) == 0 &amp;&amp; image_index_last != 0) image_speed = 0.2;
    if (floor(image_index) == 7 &amp;&amp; image_index_last != 7) {
        proj = instance_create(x + 40 * facing, y - 65, oTorizoSlashProj);
        proj.hspeed = 6 * facing;
        proj.vspeed = 4;
        proj.gravity_direction = 90;
        proj.gravity = 0.2;
        proj.image_angle = direction;
        if (global.difficulty &gt;= 2) {
            proj = instance_create(x + 40 * facing, y - 65, oTorizoSlashProj);
            proj.hspeed = 8 * facing;
            proj.vspeed = 4;
            proj.gravity_direction = 90;
            proj.gravity = 0.2;
            proj.image_angle = direction;
        }
        image_speed = 0.5;
        sfx_play(sndArachnusSwipe);
    }
    if (floor(image_index) == 12 &amp;&amp; image_index_last != 12) image_speed = 0.2;
    if (floor(image_index) == 19 &amp;&amp; image_index_last != 19) {
        proj = instance_create(x + 40 * facing, y - 65, oTorizoSlashProj);
        proj.hspeed = 6 * facing;
        proj.vspeed = -4;
        proj.gravity_direction = 270;
        proj.gravity = 0.2;
        proj.image_angle = direction;
        if (global.difficulty &gt;= 2) {
            proj = instance_create(x + 40 * facing, y - 65, oTorizoSlashProj);
            proj.hspeed = 8 * facing;
            proj.vspeed = -4;
            proj.gravity_direction = 270;
            proj.gravity = 0.2;
            proj.image_angle = direction;
        }
        image_speed = 0.5;
        sfx_play(sndArachnusSwipe);
    }
    image_index_last = floor(image_index);
    if (statetime == 182) {
        state = 1;
        statetime = -1;
    }
} // if (state == 3)
if (state == 4) {
    if (statetime == 0) {
        sprite_index = sTorizoJump;
        image_index = 0;
        image_speed = 0;
        speed = 0;
        turning = 0;
        sfx_play(sndTorizoAttack2);
    }
    if (statetime &gt; 8 &amp;&amp; !CollisionBottom &amp;&amp; image_index &lt; 4) image_index += 0.2;
    if (statetime &gt; 8 &amp;&amp; CollisionBottom &amp;&amp; image_index &lt; 13) image_index += 0.25;
    if (statetime == 30) {
        vspeed = -4;
        hspeed = 2 * -facing;
        gravity = 0.15;
    }
    if (statetime &gt; 30 &amp;&amp; CollisionBottom &amp;&amp; vspeed &gt; 0) {
        gravity = 0;
        y = 432;
        speed = 0;
        event_user(1);
    }
    if (statetime == 35) alarm[0] = 1;
    if (statetime == 120) {
        state = 3;
        statetime = -1;
    }
    if (CollisionLeft &amp;&amp; hspeed &lt; 0) {
        hspeed = 0;
        x = WallLeft + 16;
    }
    if (CollisionRight &amp;&amp; hspeed &gt; 0) {
        hspeed = 0;
        x = 592;
    }
} // if (state == 4)
if (state == 5) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 2;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime == 60) {
        vspeed = -5;
        hspeed = 6 * facing;
        gravity = 0.15;
    }
    if (statetime &gt; 60 &amp;&amp; CollisionBottom &amp;&amp; vspeed &gt; 0) {
        gravity = 0;
        y = 432;
        speed = 0;
    }
    if (statetime == 90) {
        proj = instance_create(x, y - 30, oTorizoSlashProj);
        proj.vspeed = 2;
        proj.gravity_direction = 270;
        proj.gravity = 0.2;
    }
    if (statetime == 160) {
        state = 1;
        statetime = -1;
    }
    if (CollisionLeft &amp;&amp; hspeed &lt; 0) {
        hspeed = 0;
        x = WallLeft + 16;
    }
    if (CollisionRight &amp;&amp; hspeed &gt; 0) {
        hspeed = 0;
        x = 592;
    }
} // if (state == 5)
if (state == 6) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 2;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime == 60) instance_create(x + 16 * facing, y - 16, oTorizoGrab);
    if (statetime == 200) {
        state = 0;
        statetime = -1;
    }
}
if (state == 7) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 2;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime &gt; 60) {
        oCharacter.x = x + 40;
        oCharacter.y = y - 32;
    }
    if (statetime == 120) alarm[0] = 1;
    if (statetime == 250) {
        state = 0;
        statetime = -1;
    }
}
if (state == 10) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 2;
        image_speed = 0;
        speed = 0;
        turning = 0;
    }
    if (statetime == 1) {
        vspeed = -4;
        gravity = 0.15;
    }
    if (statetime == 5) alarm[0] = 1;
    if (statetime &gt; 10 &amp;&amp; CollisionBottom &amp;&amp; vspeed &gt; 0) {
        gravity = 0;
        y = 432;
        speed = 0;
        state = 1;
        statetime = -1;
    }
    if (CollisionLeft &amp;&amp; hspeed &lt; 0) {
        hspeed = 0;
        x = WallLeft + 16;
    }
    if (CollisionRight &amp;&amp; hspeed &gt; 0) {
        hspeed = 0;
        x = 592;
    }
} // if (state == 10)
if (state == 100) {
    if (statetime == 0) {
        sprite_index = sTorizoWalk;
        image_index = 0;
        image_speed = 0;
        speed = 0;
        turning = 0;
        sfx_play(sndTorizoDeath);
        repeat (30) {
            expl = instance_create(x - 16 + random(32), y - random(80), oFXAnimSpark);
            expl.image_speed = 0.5;
            expl.additive = 0;
            expl.sprite_index = sExpl1;
            expl.image_xscale = 0.5;
            expl.image_yscale = 0.5;
        }
    }
    if (statetime == 30) {
        sprite_index = sTorizoKneel;
        image_index = 0;
    }
    if (statetime &gt; 30) {
        if (image_index &lt; 3.5) image_index += 0.1;
    }
    if (!CollisionBottom) {
        gravity = 0.2;
    } else {
        gravity = 0;
        y = 432;
        speed = 0;
    }
} // if (state == 100)
myobj1.x = x;
myobj1.y = y;
statetime += 1;
if (fxtimer &lt; 5) {
    fxtimer += 1;
} else fxtimer = 0;
if (flashing &gt; 0) flashing -= 1;
dist = distance_to_point(oCharacter.x, oCharacter.y - 20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBomb2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (other) event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMissile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myhealth &gt; 0 &amp;&amp; state &gt; 0) {
    if (!canbehit) {
        with (other) event_user(1);
    } else {
        with (other) event_user(0);
        myhealth -= 5 * (1 + other.smissile * 2);
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBeam">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myhealth &gt; 0 &amp;&amp; state &gt; 0 &amp;&amp; canbehit) {
    if (other.chargebeam) {
        myhealth -= 3 * (1 - other.sbeam * 0.4);
        event_user(0);
    } else {
        myhealth -= 1 * (1 - other.sbeam * 0.4);
        event_user(0);
    }
    with (other) {
        event_user(0);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPBombExpl">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (myhealth &gt; 0 &amp;&amp; state &gt; 0 &amp;&amp; canbehit &amp;&amp; !flashing) {
    myhealth -= 2;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBombExpl">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myhealth &gt; 0 &amp;&amp; state &gt; 0 &amp;&amp; canbehit &amp;&amp; !flashing) {
    myhealth -= 1;
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCharacter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (myhealth &gt; 0 &amp;&amp; state &gt; 0) damage_player(damage, 5, -3, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>quake = instance_create(0, 0, oQuake);
quake.delay = 0;
quake.duration = 10;
quake.intensity = 2;
ctrl_vibrate(0.5, 0.5, 10);
sfx_play(sndArachnusStomp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flashing = 5;
fxtimer = 0;
PlaySoundMono(sndTorizoHit);
if (myhealth &lt;= 0) {
    state = 100;
    statetime = 0;
    alarm[10] = 1;
    alarm[11] = 300;
    mus_fadeout(musTorizoA);
    oMusicV2.bossbgm = sndJump;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 0) {
    image_speed = 0;
    sprite_index = sTorizoWalk;
    image_index = 0;
    x += 16;
}
if (turning == 1) turning = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, -1, x, y, facing, 1, 0, image_blend, 1);
if (flashing) {
    draw_sprite_ext(sprite_index, -1, x, y, facing, 1, image_angle, make_color_rgb(255 - fxtimer * 63, 255 - fxtimer * 63, 255 - fxtimer * 63), 1);
    draw_set_blend_mode(bm_add);
    repeat (2) draw_sprite_ext(sprite_index, -1, x, y, facing, 1, image_angle, -1, 1 - fxtimer * 0.25);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
